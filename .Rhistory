blogdown::serve_site()
servr::daemon_stop(1)
install.packages(c("backports", "dbplyr", "ggspatial", "httpuv", "nlme", "reticulate", "rgdal", "semTools", "servr", "StanHeaders", "tables"))
blogdown::serve_site()
install.packages("bookdown")
install.packages("knitr")
blogdown::serve_site()
install.packages("blogdown")
install.packages("rmarkdown")
install.packages("blogdown")
blogdown::serve_site()
install.packages("evaluate")
blogdown::serve_site()
install.packages("htmltools")
blogdown::serve_site()
install.package("digest")
install.packages("digest")
blogdown::serve_site()
install.packages("servr")
blogdown::serve_site()
install.package("servr")
install.packages("servr")
install.packages(c("yaml", "httpuv"))
install.packages("servr")
install.packages("httpuv")
install.packages(c("backports", "dbplyr", "ggspatial", "httpuv", "reticulate", "rgdal", "semTools", "servr", "StanHeaders", "tables"))
.libPaths()
old_packages <- installed.packages(lib.loc = .libPaths()[1])
write.csv(old_packages, "packages.csv")
packages_to_install <- read.csv("packages.csv")
?install.packages
install.packages(packages_to_install$Package[1], lib = .libPaths()[2])
install.packages(packages_to_install$Package[1])
old_packages <- installed.packages(lib.loc = .libPaths()[1])
install.packages(packages_to_install$Package[1])
install.packages(packages_to_install$Package[1],
dependencies = "Depends")
install.packages(packages_to_install$Package[1], dependencies = "Depends")
install.packages(packages_to_install$Package[1], dependencies = T)
install.packages("packrat")
blogdown::serve_site()
servr::daemon_stop(1)
blogdown::serve_site()
servr::daemon_stop(1)
blogdown::serve_site()
servr::daemon_stop(3)
blogdown::serve_site()
servr::daemon_stop(4)
blogdown::hugo_version()
blogdown::update_hugo()
blogdown::serve_site()
install.packages(c("backports", "BDgraph", "bit64", "car", "cdata", "chron", "conquer", "cpp11", "dplyr", "effects", "fields", "glue", "Hmisc", "libcoin", "maptools", "mgcv", "mnormt", "nlme", "OpenMx", "pbapply", "ps", "R.methodsS3", "R.oo", "R.utils", "rFerns", "rgdal", "rqdatatable", "rquery", "seplyr", "sigr", "SQUAREM", "StanHeaders", "tables", "tidyr", "trend", "TTR", "vctrs", "vtreat", "workflows", "wrapr", "WVPlots", "zip"))
library(dplyr)
library(tidyverse)
library(gganimate)
library(glue)
# set working directory to folder with data
setwd("Z:/Common/Larned Research Site/data/temperature_depth")
## load data
df <- read_csv(file.path("processed", "TRod_Larned_AllData.csv"))
df$datetime <- lubridate::mdy_hm(df$DateTime_mdyHM)
df_long <-
df %>%
dplyr::select(-DateTime_mdyHM) %>%
reshape2::melt(id = "datetime")
View(df_long)
df_long <-
df %>%
dplyr::select(-DateTime_mdyHM) %>%
reshape2::melt(id = "datetime", value.name = "Temp_C")
View(df_long)
?substr
df_long <-
df %>%
dplyr::select(-DateTime_mdyHM) %>%
reshape2::melt(id = "datetime", value.name = "Temp_C") %>%
dplyr::mutate(depth_cm = substr(variable, 8, -2))
View(df_long)
df_long <-
df %>%
dplyr::select(-DateTime_mdyHM) %>%
reshape2::melt(id = "datetime", value.name = "Temp_C") %>%
dplyr::mutate(depth_cm = substring(variable, 8,))
df_long <-
df %>%
dplyr::select(-DateTime_mdyHM) %>%
reshape2::melt(id = "datetime", value.name = "Temp_C") %>%
dplyr::mutate(depth_cm = substring(variable, 8, -2))
df_long <-
df %>%
dplyr::select(-DateTime_mdyHM) %>%
reshape2::melt(id = "datetime", value.name = "Temp_C") %>%
dplyr::mutate(depth_cm = substring(variable, 8, -1))
df_long <-
df %>%
dplyr::select(-DateTime_mdyHM) %>%
reshape2::melt(id = "datetime", value.name = "Temp_C") %>%
dplyr::mutate(depth_cm = substring(variable, 8))
df_long <-
df %>%
dplyr::select(-DateTime_mdyHM) %>%
reshape2::melt(id = "datetime", value.name = "Temp_C") %>%
dplyr::mutate(depth_cm = stringr::str_sub(variable, 8, -2))
df_long <-
df %>%
dplyr::select(-DateTime_mdyHM) %>%
reshape2::melt(id = "datetime", value.name = "Temp_C") %>%
dplyr::mutate(depth_cm = stringr::str_sub(variable, 8, -3))
df_long <-
df %>%
dplyr::select(-DateTime_mdyHM) %>%
reshape2::melt(id = "datetime", value.name = "Temp_C") %>%
dplyr::mutate(depth_cm = as.numeric(stringr::str_sub(variable, 8, -3)))
## plot - timeseries graph
ggplot(df_long, aes(x = datetime, y = Temp_C, color = depth_cm)) +
geom_line()
## plot - timeseries graph
ggplot(df_long, aes(x = datetime, y = Temp_C, color = factor(epth_cm))) +
geom_line()
## plot - timeseries graph
ggplot(df_long, aes(x = datetime, y = Temp_C, color = factor(depth_cm))) +
geom_line()
## plot - timeseries graph
ggplot(df_long, aes(x = datetime, y = Temp_C, color = factor(depth_cm))) +
geom_line() +
scale_y_continuous(name = "Temperature [C]") +
scale_color_viridis_d(name = "Depth [cm from top of sensor]") +
coord_flip() +
theme_bw() +
NULL
## plot - timeseries graph
ggplot(df_long, aes(x = datetime, y = Temp_C, color = factor(depth_cm))) +
geom_line() +
scale_x_datetime(name = "Date [15 min data]") +
scale_y_continuous(name = "Temperature [C]") +
scale_color_viridis_d(name = "Depth [cm from top of sensor]") +
theme_bw()
## plot - timeseries graph
ggplot(df_long, aes(x = datetime, y = Temp_C, color = factor(depth_cm))) +
geom_line() +
scale_x_datetime(name = "Date [15 min data]") +
scale_y_continuous(name = "Temperature [C]") +
scale_color_viridis_d(name = "Depth [cm from top of sensor]") +
theme_bw() +
theme(legend.position = "bottom")
## plot - animation
ggplot(df_long[1,], aes(x = depth_cm, y = Temp_C)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "Depth [cm from top of sensor]") +
scale_y_continuous(name = "Temperature [C]") +
theme_bw() +
coord_flip() +
theme(legend.position = "bottom")
## plot - animation
ggplot(df_long[1,], aes(x = depth_cm, y = Temp_C)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "Depth [cm from top of sensor]") +
scale_y_continuous(name = "Temperature [C]") +
theme_bw() +
coord_flip()
## plot - animation
ggplot(df_long[1:7,], aes(x = depth_cm, y = Temp_C)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "Depth [cm from top of sensor]") +
scale_y_continuous(name = "Temperature [C]") +
theme_bw() +
coord_flip()
## plot - animation
ggplot(df_long[1:500,], aes(x = depth_cm, y = Temp_C)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "Depth [cm from top of sensor]") +
scale_y_continuous(name = "Temperature [C]") +
theme_bw() +
coord_flip() +
# animation
transition_states(datetime,
transition_length = 0.25,
state_length = 1) +
ggtitle("{closest_state}")
## plot - animation
ggplot(df_long[1:500,], aes(x = depth_cm, y = Temp_C)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "Depth [cm from top of sensor]") +
scale_y_continuous(name = "Temperature [C]") +
theme_bw() +
coord_flip() +
# animation
transition_states(datetime) +
ggtitle("{closest_state}")
## plot - animation
ggplot(df_long[1:35,], aes(x = depth_cm, y = Temp_C)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "Depth [cm from top of sensor]") +
scale_y_continuous(name = "Temperature [C]") +
theme_bw() +
coord_flip() +
# animation
transition_states(datetime,
transition_length = 0.25,
state_length = 1) +
ggtitle("{closest_state}")
## plot - animation
ggplot(df_long, aes(x = depth_cm, y = Temp_C)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "Depth [cm from top of sensor]") +
scale_y_continuous(name = "Temperature [C]") +
theme_bw() +
coord_flip() +
# animation
transition_states(datetime,
transition_length = 0.25,
state_length = 1) +
ggtitle("{closest_state}")
## plot - animation
ggplot(subset(df_long, lubridate::month(datetime) == 6), aes(x = depth_cm, y = Temp_C)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "Depth [cm from top of sensor]") +
scale_y_continuous(name = "Temperature [C]") +
theme_bw() +
coord_flip() +
# animation
transition_states(datetime,
transition_length = 0.25,
state_length = 1) +
ggtitle("{closest_state}")
lubridate::yday(df_long$datetime[1])
## plot - animation
ggplot(subset(df_long, lubridate::yday(datetime) == 156), aes(x = depth_cm, y = Temp_C)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "Depth [cm from top of sensor]") +
scale_y_continuous(name = "Temperature [C]") +
theme_bw() +
coord_flip() +
# animation
transition_states(datetime,
transition_length = 0.25,
state_length = 1) +
ggtitle("{closest_state}")
## plot - animation
ggplot(subset(df_long, lubridate::yday(datetime) == 156),
aes(x = depth_cm, y = Temp_C, color = Temp_C)) +
geom_line() +
geom_point() +
scale_x_reverse(name = "Depth [cm from top of sensor]") +
scale_y_continuous(name = "Temperature [C]") +
scale_color_viridis_c(name = "Temperature [C]") +
theme_bw() +
coord_flip() +
# animation
transition_states(datetime,
transition_length = 0.25,
state_length = 1) +
ggtitle("{closest_state}")
## plot - animation
ggplot(subset(df_long, lubridate::yday(datetime) <= 163),
aes(x = depth_cm, y = Temp_C, color = Temp_C)) +
geom_line() +
geom_point() +
scale_x_reverse(name = "Depth [cm from top of sensor]") +
scale_y_continuous(name = "Temperature [C]") +
scale_color_viridis_c(name = "Temperature [C]") +
theme_bw() +
coord_flip() +
# animation
transition_states(datetime,
transition_length = 0.1,
state_length = 0.5) +
ggtitle("{closest_state}")
## plot - animation
ggplot(subset(df_long, lubridate::yday(datetime) <= 156),
aes(x = depth_cm, y = Temp_C, color = Temp_C)) +
geom_line() +
geom_point() +
scale_x_reverse(name = "Depth [cm from top of sensor]") +
scale_y_continuous(name = "Temperature [C]") +
scale_color_viridis_c(name = "Temperature [C]") +
theme_bw() +
coord_flip() +
# animation
transition_states(datetime,
transition_length = 0.1,
state_length = 0.5) +
ggtitle("{closest_state}")
## plot - animation
ggplot(subset(df_long, lubridate::yday(datetime) <= 156),
aes(x = depth_cm, y = Temp_C, color = Temp_C)) +
geom_line() +
geom_point() +
scale_x_reverse(name = "Depth [cm from top of sensor]") +
scale_y_continuous(name = "Temperature [C]") +
scale_color_viridis_c(name = "Temperature [C]") +
theme_bw() +
coord_flip() +
# animation
transition_states(datetime,
transition_length = 0.01,
state_length = 0.1) +
ggtitle("{closest_state}")
?animate
## plot - animation
ggplot(subset(df_long, lubridate::yday(datetime) <= 156),
aes(x = depth_cm, y = Temp_C, color = Temp_C)) +
geom_line() +
geom_point() +
scale_x_reverse(name = "Depth [cm from top of sensor]") +
scale_y_continuous(name = "Temperature [C]") +
scale_color_viridis_c(name = "Temperature [C]") +
theme_bw() +
coord_flip() +
# animation
transition_states(datetime,
transition_length = 0.01,
state_length = 0.1) +
ggtitle("{closest_state}") +
animate(fps = 50)
## plot - timeseries graph
ggplot(df_long, aes(x = datetime, y = Temp_C, color = factor(depth_cm))) +
geom_line() +
scale_x_datetime(name = "Date [15 min data]") +
scale_y_continuous(name = "Temperature [C]") +
scale_color_viridis_d(name = "Depth [cm from top of sensor]") +
theme_bw() +
theme(legend.position = "bottom") +
ggsave(file.path("code+plots", "TRod_AllData_Timeseries.png"))
library(tidyverse)
library(gganimate)
library(glue)
# set working directory to folder with data
setwd("Z:/Common/Larned Research Site/data/temperature_depth")
## load data
df <- read_csv(file.path("processed", "TRod_Larned_AllData.csv"))
## load data
df <- read_csv(file.path("processed", "TRod_Larned_AllData.csv"))
df$datetime <- lubridate::mdy_hm(df$DateTime_mdyHM)
df$year <- lubridate::year(df$datetime)
df$DOY <- lubdridate::yday(df$datetime)
df$DOY <- lubridate::yday(df$datetime)
## conver to long format
df_long <-
df %>%
dplyr::select(-DateTime_mdyHM) %>%
reshape2::melt(id = "datetime", value.name = "Temp_C") %>%
dplyr::mutate(depth_cm = as.numeric(stringr::str_sub(variable, 8, -3)))
## converr to long format
df_long <-
df %>%
dplyr::select(-DateTime_mdyHM) %>%
reshape2::melt(id = c("datetime", "year", "DOY"), value.name = "Temp_C") %>%
dplyr::mutate(depth_cm = as.numeric(stringr::str_sub(variable, 8, -3)))
## download discharge data
dataRetrieval::readNWISdv("07141220")
?readNWISdv
head(df)
tail(df)
## download discharge data
df_Q <- dataRetrieval::readNWISdv("07141220", "0060", startDate = "2020-06-04", endDate = "2020-09-14")
## download discharge data
df_Q <- dataRetrieval::readNWISdv("07141220", "00060", startDate = "2020-06-04", endDate = "2020-09-14")
View(df_Q)
## download discharge data
df_Q_raw <- dataRetrieval::readNWISdv("07141220", "00060",
startDate = "2020-06-04", endDate = "2020-09-14")
head(df_Q_raw)
df_Q <- tibble::tibble(datetime = lubridate::ymd(df_Q_raw$Date),
discharge_cfs = df_Q_raw$X_00060_00003,
year = lubridate::year(datetime),
DOY = lubridate::yday(datetime))
View(df_Q)
df_withQ <-
df_long %>%
dplyr::left_join(df_Q_raw[,c("year", "DOY", "discharge_cfs")], by = c("year", "DOY"))
View(df_long)
df_withQ <-
df_long %>%
dplyr::left_join(df_Q[,c("year", "DOY", "discharge_cfs")], by = c("year", "DOY"))
View(df_withQ)
## plot: timeseries
p_temp <-
ggplot(df_long, aes(x = datetime, y = Temp_C, color = factor(depth_cm))) +
geom_line() +
scale_x_continuous("Date [15 min intervals]") +
scale_y_continuous("Temperature [C]") +
scale_fill_viridis_d(name = "Depth [cm from top of sensor]")
p_temp
## plot: timeseries
#p_temp <-
ggplot(df_long, aes(x = datetime, y = Temp_C, color = factor(depth_cm))) +
geom_line() +
scale_x_continuous("Date [15 min intervals]") +
scale_y_continuous("Temperature [C]") +
scale_color_viridis_d(name = "Depth [cm from top of sensor]") +
theme_bw()
## plot: timeseries
#p_temp <-
ggplot(df_long, aes(x = datetime, y = Temp_C, color = factor(depth_cm))) +
geom_line() +
scale_x_datetime("Date [15 min intervals]") +
scale_y_continuous("Temperature [C]") +
scale_color_viridis_d(name = "Depth [cm from top of sensor]") +
theme_bw()
ggplot(df_Q, aes(x = datetime, y = discharge_cfs)) +
geom_line()
ggplot(df_Q, aes(x = datetime, y = discharge_cfs)) +
geom_line() +
scale_x_datetime("Date [daily interval]") +
scale_y_continuous("Discharge [cfs]") +
theme_bw()
ggplot(df_Q, aes(x = datetime, y = discharge_cfs)) +
geom_line() +
scale_x_date("Date [daily interval]") +
scale_y_continuous("Discharge [cfs]") +
theme_bw()
## plot: timeseries
p_temp <-
ggplot(df_long, aes(x = datetime, y = Temp_C, color = factor(depth_cm))) +
geom_line() +
scale_x_datetime("Date [15 min interval]") +
scale_y_continuous("Temperature [C]") +
scale_color_viridis_d(name = "Depth [cm from top of sensor]") +
theme_bw()
p_Q <-
ggplot(df_Q, aes(x = datetime, y = discharge_cfs)) +
geom_line() +
scale_x_date("Date [daily interval]") +
scale_y_continuous("Discharge [cfs]") +
theme_bw()
library(patchwork)
(p_temp / p_Q)
?scale_x_datetime
(p_temp / p_Q)
## plot: timeseries
date_limits <- lubridate::ymd(c("2020-06-13", "2020-09-15"))
ggplot(df_long, aes(x = datetime, y = Temp_C, color = factor(depth_cm))) +
geom_line() +
scale_x_datetime("Date [15 min interval]",
limits = date_limits) +
scale_y_continuous("Temperature [C]") +
scale_color_viridis_d(name = "Depth [cm from top of sensor]") +
theme_bw()
ggplot(df_Q, aes(x = datetime, y = discharge_cfs)) +
geom_line() +
scale_x_date("Date [daily interval]",
limits = date_limits) +
scale_y_continuous("Discharge [cfs]") +
theme_bw()
datetime_limits <- lubridate::ymd_hm(c("2020-06-13 0:00", "2020-09-15 0:00"))
p_temp <-
ggplot(df_long, aes(x = datetime, y = Temp_C, color = factor(depth_cm))) +
geom_line() +
scale_x_datetime("Date [15 min interval]",
limits = datetime_limits, expand = c(0,0)) +
scale_y_continuous("Temperature [C]") +
scale_color_viridis_d(name = "Depth [cm from top of sensor]") +
theme_bw()
p_Q <-
ggplot(df_Q, aes(x = datetime, y = discharge_cfs)) +
geom_line() +
scale_x_date("Date [daily interval]",
limits = date_limits, expand = c(0,0)) +
scale_y_continuous("Discharge [cfs]") +
theme_bw()
(p_temp / p_Q)
## plot: timeseries
date_limits <- lubridate::ymd(c("2020-06-01", "2020-09-15"))
datetime_limits <- lubridate::ymd_hm(c("2020-06-01 0:00", "2020-09-15 0:00"))
p_temp <-
ggplot(df_long, aes(x = datetime, y = Temp_C, color = factor(depth_cm))) +
geom_line() +
scale_x_datetime("Date [15 min interval]",
limits = datetime_limits, expand = c(0,0)) +
scale_y_continuous("Temperature [C]") +
scale_color_viridis_d(name = "Depth [cm from top of sensor]") +
theme_bw()
p_Q <-
ggplot(df_Q, aes(x = datetime, y = discharge_cfs)) +
geom_line() +
scale_x_date("Date [daily interval]",
limits = date_limits, expand = c(0,0)) +
scale_y_continuous("Discharge [cfs]") +
theme_bw()
(p_temp / p_Q)
p_temp <-
ggplot(df_long, aes(x = datetime, y = Temp_C, color = factor(depth_cm))) +
geom_line() +
scale_x_datetime("Date [15 min interval]",
limits = datetime_limits, expand = c(0,0)) +
scale_y_continuous("Temperature [C]") +
scale_color_viridis_d(name = "Depth [cm from top of sensor]") +
theme_bw() +
theme(legend.position = "bottom")
p_Q <-
ggplot(df_Q, aes(x = datetime, y = discharge_cfs)) +
geom_line() +
scale_x_date("Date [daily interval]",
limits = date_limits, expand = c(0,0)) +
scale_y_continuous("Discharge [cfs]") +
theme_bw()
(p_Q / p_temp)
(p_Q / p_temp) +
ggsave(file.path("code+plots", "TRod_AllData_Timeseries.png"))
install.packages(c("backports", "bibtex", "broom", "callr", "car", "coda", "colourpicker", "covr", "cowplot", "cpp11", "deldir", "devtools", "dials", "earth", "extraDistr", "fields", "forecast", "future", "globals", "gmp", "gplots", "htmlTable", "htmlwidgets", "igraph", "inline", "insight", "jsonlite", "knitr", "lava", "lhs", "lmtest", "matrixStats", "multcomp", "network", "openssl", "openxlsx", "plotmo", "processx", "ps", "psych", "quanteda", "quantreg", "RcppArmadillo", "rcrossref", "readr", "regsem", "rgdal", "rgeos", "rlang", "rmarkdown", "rnoaa", "rNOMADS", "rpart.plot", "rpf", "rsample", "RSQLite", "sandwich", "servr", "sf", "shape", "shinyjs", "sigr", "sna", "statnet.common", "stringi", "tables", "tidypredict", "tidytext", "tinytex", "trend", "usethis", "withr", "workflows", "WVPlots", "xfun", "xts"))
install.packages(c("backports", "bibtex", "broom", "callr", "car", "coda", "colourpicker", "covr", "cowplot", "cpp11", "deldir", "devtools", "dials", "earth", "extraDistr", "fields", "forecast", "future", "globals", "gmp", "gplots", "htmlTable", "htmlwidgets", "igraph", "inline", "insight", "jsonlite", "knitr", "lava", "lhs", "lmtest", "matrixStats", "multcomp", "network", "openssl", "openxlsx", "plotmo", "processx", "ps", "psych", "quanteda", "quantreg", "RcppArmadillo", "rcrossref", "readr", "regsem", "rgdal", "rgeos", "rlang", "rmarkdown", "rnoaa", "rNOMADS", "rpart.plot", "rpf", "rsample", "RSQLite", "sandwich", "servr", "sf", "shape", "shinyjs", "sigr", "sna", "statnet.common", "stringi", "tables", "tidypredict", "tidytext", "tinytex", "trend", "usethis", "withr", "workflows", "WVPlots", "xfun", "xts"))
install.packages(c("backports", "bibtex", "broom", "callr", "car", "coda", "colourpicker", "covr", "cowplot", "cpp11", "deldir", "devtools", "dials", "earth", "extraDistr", "fields", "forecast", "future", "globals", "gmp", "gplots", "htmlTable", "htmlwidgets", "igraph", "inline", "insight", "jsonlite", "knitr", "lava", "lhs", "lmtest", "matrixStats", "multcomp", "network", "openssl", "openxlsx", "plotmo", "processx", "ps", "psych", "quanteda", "quantreg", "RcppArmadillo", "rcrossref", "readr", "regsem", "rgdal", "rgeos", "rlang", "rmarkdown", "rnoaa", "rNOMADS", "rpart.plot", "rpf", "rsample", "RSQLite", "sandwich", "servr", "sf", "shape", "shinyjs", "sigr", "sna", "statnet.common", "stringi", "tables", "tidypredict", "tidytext", "tinytex", "trend", "usethis", "withr", "workflows", "WVPlots", "xfun", "xts"))
